Settings As CanvasComponent:
    Fill: =RGBA(0, 0, 0, 0)
    Height: =640
    Items: |-
        =[
            {
                'Field Name': "Setting1",
                Category: "Theme",
                Context: "This is a setting",
                'Input Type': "Toggle",
                'Default Value': "True",
                'Display Mode': DisplayMode.Edit
            },
            {
                'Field Name': "Setting2.1",
                Context: "This is a setting",
                Category: "Accessibility",
                'Input Type': "Toggle",
                'Default Value': "False",
                'Display Mode': DisplayMode.Edit
            },
            {
                'Field Name': "Setting2.2",
                Context: "This is a setting",
                Category: "Accessibility",
                'Input Type': "Toggle",
                'Default Value': "False",
                'Display Mode': DisplayMode.Edit
            },
            {
                'Field Name': "Setting2.3",
                Context: "This is a setting",
                Category: "Accessibility",
                'Input Type': "Toggle",
                'Default Value': "False",
                'Display Mode': DisplayMode.Edit
            },
            {
                'Field Name': "Setting3",
                Category: "Misc",
                Context: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                'Input Type': "Text",
                'Default Value': "True",
                'Display Mode': DisplayMode.Edit
            },
            {
                'Field Name': "Setting3",
                Category: "Misc",
                Context: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                'Input Type': "Selection",
                'Default Value': "True",
                'Display Mode': DisplayMode.Edit,
                Items: ["Hello", "World"]
            }]
    OnReset: =
    Output: |-
        =ForAll(
            galFields.AllItems,
            {
                'Field Name': ThisRecord.'Field Name',
                'New Value': Switch(
                                ThisRecord.'Input Type',
                                "Toggle",
                                    Text(ThisRecord.tglInput.Value),
                                "Text",
                                    ThisRecord.txtInput.Text,
                                "Selection",
                                    ThisRecord.dd_Input.Selected.Value),
                'Default Value': ThisRecord.'Default Value'
            })
    Properties: |-
        ={
            /*
                    -----Default Style information, Will apply to all controls unless specified in the controls field below.
            */
            Colours: {
                Primary: ColorValue("#005d99"),         //Covers Fills for Actionable Controls (i.e. Buttons, Toggles, Checkboxes), Icon Colours
                Secondary: ColorValue("#555555"),       //Covers 
                Border: ColorValue("#005d99"),          //Specifically for border colours of controls such as text boxes, drop downs
                Background: Color.White,                 //Covers the background of the component itself, for Controls, this will control the Fill property
                Text: Color.Black
            },
            Style: {
                Borders: {
                    Thickness: 1,
                    FocusThickness: 1.0,
                    Radius: {
                        TopLeft: 0,
                        TopRight: 0,
                        BottomLeft: 0,
                        BottomRight: 0
                    }
                },
                Font: {
                    'Font-Family': Font.'Open Sans',
                    Sizes: {
                        Heading: 28,
                        Action: 16,
                        Text: 17
                    }
                }
            },
            /*
                    ----End of Default configuration
            */
            Controls: {
                /*
                        -----Overrides for individual control types in components. Options specified here will override the default options above.
                */
                Label: {
                    Colours: {
                        Primary: ColorValue("#005d99"),
                        Secondary: ColorValue("#555555"),
                        Border: ColorValue("#222222"),
                        Background: RGBA(
                            0,
                            0,
                            0,
                            0
                        ),
                        Text: Color.Black
                    },
                    Style: {
                        Borders: {
                            Thickness: 0.5,
                            FocusThickness: 1.0
                        },
                        Font: {
                            'Font-Family': Font.'Open Sans',
                            Sizes: {
                                Heading: 28,
                                Action: 16,
                                Text: 17
                            }
                        }
                    }
                },
                Toggle: {
                    Colours: {
                        Primary: ColorValue("#005d99"),
                        Secondary: ColorValue("#555555"),
                        Border: ColorValue("#222222")
                    },
                    Style: {
                        Borders: {
                            Thickness: 0,
                            FocusThickness: 1.0
                        },
                        Font: {
                            'Font-Family': Font.'Open Sans',
                            Sizes: {
                                Action: 16
                            }
                        }
                    }
                },
                TextInput: {
                    Colours: {
                        Primary: ColorValue("#005d99"),
                        Secondary: ColorValue("#555555"),
                        Border: ColorValue("#222222"),
                        Background: RGBA(
                            0,
                            0,
                            0,
                            0
                        ),
                        Text: Color.Black
                    },
                    Style: {
                        Borders: {
                            Thickness: 0.5,
                            FocusThickness: 1.0,
                            Radius: {
                                TopLeft: 0,
                                TopRight: 0,
                                BottomLeft: 0,
                                BottomRight: 0
                            }
                        },
                        Font: {
                            'Font-Family': Font.'Open Sans',
                            Sizes: {
                                Heading: 28,
                                Action: 16,
                                Text: 17    
                            }
                        }
                    }
                },
                Image: {
                    Colours: {
                        Primary: ColorValue("#005d99"),
                        Secondary: ColorValue("#555555"),
                        Border: ColorValue("#222222"),
                        Background: RGBA(
                            0,
                            0,
                            0,
                            0
                        )
                    },
                    Style: {
                        Borders: {
                            Thickness: 0,
                            Colour: ColorValue("#555555"),
                            FocusThickness: 1.0,
                            Radius: {
                                TopLeft: 0,
                                TopRight: 0,
                                BottomLeft: 0,
                                BottomRight: 0
                            }
                        }
                    }
                },
                Bubble: {
                    Colours: {Background: ColorValue("#ffffff"), Border: ColorValue("#222222"),Text: Color.Black},
                    Style: {
                        Borders: {
                            Radius: {
                                TopLeft: 0,
                                TopRight: 0,
                                BottomLeft: 0,
                                BottomRight: 0
                            },
                            Thickness: 0
                        }
                    }
                },
                Dropdown: {
                    Colours: {
                        Primary: ColorValue("#005d99"),
                        Secondary: ColorValue("#555555"),
                        Border: ColorValue("#222222"),
                        Background: RGBA(
                            255,
                            255,
                            255,
                            1
                        ),
                        Text: Color.Black
                    },
                    Style: {
                        Borders: {
                            Thickness: 0.5,
                            FocusThickness: 1.0
                        },
                        Font: {
                            'Font-Family': Font.'Open Sans',
                            Sizes: {
                                Heading: 28,
                                Action: 16,
                                Text: 17
                            }
                        }
                    }
                },
                Gallery: {
                    Colours: {
                        Primary: ColorValue("#ffffff"),
                        Secondary: ColorValue("#005d99"),
                        Background: RGBA(
                            255,
                            255,
                            255,
                            1
                        )
                    },
                    Style: {
                        Borders: {
                            Thickness: 0,
                            FocusThickness: 1.0
                        }
                    }
                }
            }
        }
    ReadMe: |-
        =/*
        
        ****Header Component****
        ****Settings****
        
        Controls that can be overidden:
        
        + Label
        + DropDown
        + Toggle
        + TextInput
        + Icon
        
        ====Inputs====
        
            Properties (Record):
                A record property containing configurable properties like colours, typography etc.
                More information on how theming works can be found here: https://github.com/sgtsnacks-64/SocialMediaKit-PPCL/blob/main/Theming.md
        
            Items (Table): 
                Table of items to be displayed in the form:
                **The Sample below can be copied and reused in this component**
                    Table(
                        {
                            'Field Name': "Setting3",               //The Field Name to be displayed                        
                            Category: "Misc",                       //The Category for this field, If categorisation is enabled, will be used to categorise
                            Context: "Lorem ipsum",                 //The context text of this field, displayed below the Field Name
                            'Input Type': "Selection",              //The Input Type, can be "Text", "Toggle" or "Selection"
                            'Default Value': "True",                //The Default Value, as text. Will be interpreted by each input type, for example, "true" will be true for Toggle
                            'Display Mode': DisplayMode.Edit,       //The DisplayMode for this field, can be DisplayMode.Edit, DisplayMode.View or DisplayMode.Disabled
                            Items: ["Hello", "World"]               //For Selection Input, a list of items for selection, must be a flat table of String with a "Value" key
                        })
        
            Settings Properties (Record):
                A list of settings to configure on this component:
                **The Sample below can be copied and reused in this component**
                    {
                        'Break Down by Categories': true            //Denotes if items are to be categorised. Categorisation is based on field order and is not sorted alphabetically.
                    }
        
            ReadMe:
                The Contents of this ReadMe
        
            Use Modern Theming (Boolean):
                Define if Modern Theming will be used (true), or the theming as defined in the Properties record (false)
        
        ====Outputs====
        
            Output (Table):
                A table of output field names and values:
                ***Example***
                    Table(
                        {
                            'Field Name': "This Field",             //String: The Field Name based on Input Table
                            'New Value': "true",                    //String: The New Value from the field
                            'Default Value': "false"                //String: The Default Value, useful for comparison
                        })
                Outputs can be looked up:
                    LookUp(Component.Output, 'Field Name' = "This Field").'New Value'
                
                Or indexed:
                    Index(Component.Output, 2).'New Value'
        */
    SettingsProperties: |-
        ={
            'Break Down by Categories': true
        }
    UseModernTheming: =false
    Width: =App.Width
    X: =0
    Y: =0
    ZIndex: =1

    galFields As gallery.variableTemplateHeightGallery:
        Height: =Parent.Height
        Items: |-
            =If(
                Settings.SettingsProperties.'Break Down by Categories',
            Ungroup(
                // 13:38:23 05/09/2023 | Mike.Gowland: Get Unique Categories
                ForAll(
                    Distinct(
                        Settings.Items.Category,
                        Category
                    ) As UniqueCat,
                    // 13:39:04 05/09/2023 | Mike.Gowland: For the x items based on Category
                    ForAll(
                        Sequence(
                            CountRows(
                                Filter(
                                    Settings.Items,
                                    Category = UniqueCat.Value
                                )
                            )
                        ) As Counter,
            
                        // 13:40:03 05/09/2023 | Mike.Gowland: Patch ongoing Counter as ID field
                        Patch(
                            Index(
                                Sort(
                                    Filter(Settings.Items, ThisRecord.Category = UniqueCat.Value),
                                    Category
                                ),
                                Counter.Value
                            ),
                            {ID: Counter.Value}
                        )
                    )
                ),
                "Value"
            ),
            ForAll(
                Sequence(
                    CountRows(
                        Settings.Items)),
                Patch(
                    Index(
                        Settings.Items,
                        ThisRecord.Value),
                    {
                        ID: ThisRecord.Value})))
        Layout: =Layout.Vertical
        LoadingSpinner: =LoadingSpinner.Data
        ShowScrollbar: =false
        TemplateSize: =150
        Width: =Parent.Width
        ZIndex: =3

        lblFieldName As label:
            AutoHeight: =true
            Color: =If(Settings.UseModernTheming, Color.Black, Coalesce(Settings.Properties.Controls.Label.Colours.Text, Settings.Properties.Colours.Text))
            DisplayMode: =ThisItem.'Display Mode'
            Font: =Settings.Properties.Style.Font.'Font-Family'
            FontWeight: =FontWeight.Bold
            Height: =35
            OnSelect: =Select(Parent)
            Size: =Settings.Properties.Style.Font.Sizes.Text
            Text: =ThisItem.'Field Name'
            VerticalAlign: =VerticalAlign.Top
            Width: =Switch(ThisItem.'Input Type', "Toggle", tglInput.X, "Text", txtInput.X, "Selection", dd_Input.X)
            X: =lblCategory.X + 10
            Y: =If(!lblCategory.Visible,10,lblCategory.Y + lblCategory.Height) 
            ZIndex: =1

        tglInput As toggleSwitch:
            Default: =Boolean(ThisItem.'Default Value')
            DisplayMode: =ThisItem.'Display Mode'
            FalseFill: =If(Settings.UseModernTheming, App.Theme.Colors.Lighter70,Coalesce(Settings.Properties.Controls.Toggle.Colours.Secondary,Settings.Properties.Colours.Secondary))
            Font: =Settings.Properties.Style.Font.'Font-Family'
            HandleFill: |-
                =
                ColorFade(If(Self.Value, Self.FalseFill, Self.TrueFill),30%)
            Height: =32
            OnChange: =
            OnSelect: =Select(Parent)
            ShowLabel: =false
            Size: =Settings.Properties.Style.Font.Sizes.Action
            TextPosition: =TextPosition.Left
            TrueFill: =If(Settings.UseModernTheming, App.Theme.Colors.Primary,Coalesce(Settings.Properties.Controls.Toggle.Colours.Primary,Settings.Properties.Colours.Primary))
            Visible: =ThisItem.'Input Type' = "Toggle"
            Width: =100
            X: =Parent.TemplateWidth - Self.Width - (Parent.TemplatePadding * 2)
            Y: =lblFieldName.Y + lblFieldName.Height /2  - Self.Height  / 2
            ZIndex: =2

        lblContext As label:
            AutoHeight: =true
            Color: =If(Settings.UseModernTheming, Color.Black, Coalesce(Settings.Properties.Controls.Label.Colours.Text, Settings.Properties.Colours.Text))
            Font: =Settings.Properties.Style.Font.'Font-Family'
            FontWeight: =FontWeight.Semibold
            Height: =70
            Italic: =true
            OnSelect: =Select(Parent)
            Size: =Settings.Properties.Style.Font.Sizes.Action
            Text: =ThisItem.Context
            Width: =Parent.Width - (Parent.TemplatePadding * 2) - 20
            X: =10
            Y: =lblFieldName.Height + lblFieldName.Y + 25
            ZIndex: =3

        txtInput As text:
            BorderColor: =If(Settings.UseModernTheming, App.Theme.Colors.Primary, Coalesce(Settings.Properties.Controls.TextInput.Colours.Border, Settings.Properties.Colours.Border))
            BorderThickness: =Coalesce(Settings.Properties.Controls.TextInput.Style.Borders.Thickness,Settings.Properties.Style.Borders.Thickness)
            Color: =If(Settings.UseModernTheming, Color.Black, Coalesce(Settings.Properties.Controls.Dropdown.Colours.Text,Settings.Properties.Colours.Text))
            Default: =ThisItem.'Default Value'
            Fill: =If(Settings.UseModernTheming, RGBA(0,0,0,0), Coalesce(Settings.Properties.Controls.TextInput.Colours.Background,Settings.Properties.Colours.Background))
            Font: =Settings.Properties.Style.Font.'Font-Family'
            HintText: =""
            HoverBorderColor: =ColorFade(Self.BorderColor,30%)
            HoverFill: =ColorFade(Self.BorderColor,75%)
            OnChange: =
            RadiusBottomLeft: =Coalesce(Settings.Properties.Controls.TextInput.Style.Borders.Radius.BottomLeft, Settings.Properties.Style.Borders.Radius.BottomLeft)
            RadiusBottomRight: =Coalesce(Settings.Properties.Controls.TextInput.Style.Borders.Radius.BottomRight, Settings.Properties.Style.Borders.Radius.BottomRight)
            RadiusTopLeft: =Coalesce(Settings.Properties.Controls.TextInput.Style.Borders.Radius.TopLeft, Settings.Properties.Style.Borders.Radius.TopLeft)
            RadiusTopRight: =Coalesce(Settings.Properties.Controls.TextInput.Style.Borders.Radius.TopRight, Settings.Properties.Style.Borders.Radius.TopRight)
            Size: =Settings.Properties.Style.Font.Sizes.Text
            Visible: =ThisItem.'Input Type' = "Text"
            Width: =Parent.TemplateWidth / 2
            X: =Parent.TemplateWidth - Self.Width - (Parent.TemplatePadding * 2)
            Y: =lblFieldName.Y + lblFieldName.Height / 2 - Self.Height / 2
            ZIndex: =5

        dd_Input As dropdown:
            BorderColor: =If(Settings.UseModernTheming, App.Theme.Colors.Primary, Coalesce(Settings.Properties.Controls.TextInput.Colours.Border, Settings.Properties.Colours.Border))
            BorderThickness: =Coalesce(Settings.Properties.Controls.Dropdown.Style.Borders.Thickness,Settings.Properties.Style.Borders.Thickness)
            ChevronBackground: =If(Settings.UseModernTheming, Color.White, Coalesce(Settings.Properties.Controls.Dropdown.Colours.Primary,Settings.Properties.Colours.Primary))
            ChevronFill: =If(Settings.UseModernTheming, Color.White, Coalesce(Settings.Properties.Controls.Dropdown.Colours.Secondary,Settings.Properties.Colours.Secondary))
            ChevronHoverBackground: =ColorFade(Self.ChevronBackground, -20%)
            Color: =If(Settings.UseModernTheming, Color.Black, Coalesce(Settings.Properties.Controls.Dropdown.Colours.Text,Settings.Properties.Colours.Text))
            Fill: =If(Settings.UseModernTheming, RGBA(0,0,0,0),Coalesce(Settings.Properties.Controls.Dropdown.Colours.Background,Settings.Properties.Colours.Background))
            Font: =Settings.Properties.Style.Font.'Font-Family'
            Height: =txtInput.Height
            HoverFill: =ColorFade(Self.BorderColor, 75%)
            Items: =ThisItem.Items
            OnChange: =
            OnSelect: =Select(Parent)
            PressedColor: =ColorFade(Self.BorderColor,-30%)
            PressedFill: =ColorFade(Self.BorderColor,-30%)
            SelectionColor: =ColorFade(Self.Color,-30%)
            SelectionFill: =ColorFade(Self.Fill, 30%)
            Size: =Settings.Properties.Style.Font.Sizes.Action
            Visible: =ThisItem.'Input Type' = "Selection"
            Width: =txtInput.Width
            X: =txtInput.X
            Y: =lblFieldName.Y + lblFieldName.Height / 2 - Self.Height / 2
            ZIndex: =6

        Rectangle2 As rectangle:
            Fill: =If(Settings.UseModernTheming, App.Theme.Colors.Lighter60, ColorFade(Settings.Properties.Colours.Secondary,60%))
            Height: =1
            OnSelect: =Select(Parent)
            Width: =Parent.TemplateWidth
            Y: =lblContext.Y + lblContext.Height + 10
            ZIndex: =7

        lblCategory As label:
            AutoHeight: =true
            Color: =If(Settings.UseModernTheming, Color.Black, Coalesce(Settings.Properties.Controls.Label.Colours.Text, Settings.Properties.Colours.Text))
            DisplayMode: =DisplayMode.View
            Font: =Settings.Properties.Style.Font.'Font-Family'
            FontWeight: =FontWeight.Bold
            Height: =galFields.Height + Self.Y
            OnSelect: =Select(Parent)
            Size: =Settings.Properties.Style.Font.Sizes.Heading
            Text: =ThisItem.Category
            VerticalAlign: =VerticalAlign.Top
            Visible: |-
                =If(
                    Settings.SettingsProperties.'Break Down by Categories',
                    ThisItem.ID  = 1,
                    false)
            Width: =Parent.TemplateWidth
            ZIndex: =8

